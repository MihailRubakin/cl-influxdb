{"name":"Cl-influxdb","tagline":"Common Lisp interface to the Time Series Database InfluxDB","body":"CL-INFLUXDB\r\n-----------\r\n\r\nThis package is a native Common Lisp interface for the InfluxDB time series database.\r\n\r\n[InfluxDB](http://influxdb.org) is a scalable time series database.\r\n\r\nInstallation\r\n------------\r\ncl-influxdb will be distributed via [Quicklisp](http://quicklisp.org).\r\nIt can also be obtained via it's [github repository] (http://github.com/mmaul/cl-influxdb)\r\n\r\nUnder SBCL the system cl-influxdb.tests is excluded to to incompatibilities with NST and \r\nSBCL's enforcement of *pprint-dispatch* immutability.\r\n\r\n\r\n===========================================================================\r\n\r\nUsage\r\n=====\r\n\r\nLets create a instance of class INFLUXDB to get started the default is\r\nuser = root, password = root, host = 127.0.0.1, port = 8086.\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(SETQ *INFLUXDB* (MAKE-INSTANCE 'INFLUXDB :DATABASE *DB*))\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\n#<INFLUXDB #x302003474EFD>\r\n```\r\n===========================================================================\r\n\r\nCreating another instance if INFLUX DB to test database user commands later.\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(SETQ *USER-DB*\r\n      (MAKE-INSTANCE\r\n        'INFLUXDB\r\n        :DATABASE\r\n        *DB*\r\n        :USER\r\n        *APP-USER*\r\n        :PASSWORD\r\n        *APP-PASSWORD*))\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\n#<INFLUXDB #x3020034744DD>\r\n```\r\n===========================================================================\r\n\r\nFirst lets see if the server is alive\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(PING *INFLUXDB*)\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\n((:STATUS . \"ok\"))\r\n```\r\n===========================================================================\r\n\r\nGet list of defined databases and check to see if example database \r\n'example' exists.  If it does delete it.\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(LOOP FOR (NAME RESP) IN (GET-DATABASE-LIST *INFLUXDB*)\r\n      DO (FORMAT T \"~t ~a~%\" (CDR NAME))\r\n      WHEN (STRING= *DB* (CDR NAME))\r\n        DO (PROGN (FORMAT T \"Deleting: ~a~%\" (CDR NAME))\r\n                  (DELETE-DATABASE *INFLUXDB* (CDR NAME))))\r\n;;-------------------------------------------------------------------------\r\n  example\r\nDeleting: example\r\n\r\nResults:\r\n\r\nNIL\r\n```\r\n===========================================================================\r\n\r\nCreate a new database\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(HANDLER-CASE (CREATE-DATABASE *INFLUXDB* *DB*) (COMMAND-FAIL (E) E))\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\nT\r\n```\r\n===========================================================================\r\n \r\nIf we had tried to create a database and it already existed\r\nWe get a condition, like this:\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(HANDLER-CASE (CREATE-DATABASE *INFLUXDB* *DB*)\r\n              (COMMAND-FAIL (E) (PRINT E)))\r\n;;-------------------------------------------------------------------------\r\n\r\n#<COMMAND-FAIL #x3020034AC29D> \r\nResults:\r\n\r\n#<COMMAND-FAIL #x3020034AC29D>\r\n```\r\n===========================================================================\r\n\r\nNot that it's necessary for this simple test, but you might need\r\nto create a seperate user for an application. lets add the user 'user'\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(ADD-DATABASE-USER *INFLUXDB* *APP-USER* *APP-PASSWORD*)\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\nT\r\n```\r\n===========================================================================\r\n\r\nLets change the app user password\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(UPDATE-DATABASE-USER-PASSWORD *USER-DB* \"newpass1\")\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\nT\r\n```\r\n===========================================================================\r\n \r\nLoad some data \r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(WRITE-POINTS *USER-DB*\r\n              '(((:NAME . RESPONSE_TIMES) (:COLUMNS TIME VALUE)\r\n                 (:POINTS (1394761721 1.0) (1394761722 2.0))))\r\n              :TIME-PRECISION\r\n              'S)\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\nT\r\n```\r\n===========================================================================\r\n\r\nNow that we inserted some data lets list it.\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(QUERY *USER-DB* \"select time from response_times;\")\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\n(((:NAME . \"response_times\")\r\n  (:COLUMNS \"time\" \"sequence_number\" \"value\")\r\n  (:POINTS (1394761 260001 2) (1394761 250001 1))))\r\n```\r\n===========================================================================\r\n\r\nLets insert some data dynamically for a data source on the web.\r\nOne thing to note is that when using symbols or keywords, is that they\r\n are down cased. So a series :MySeries will be created as 'myseries'\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(WRITE-POINTS *INFLUXDB*\r\n              (LIST (LIST* '(:NAME . GASRATECO2)\r\n                           (LIST* '(:COLUMNS INPUTGASRATE CO2)\r\n                                  (LIST\r\n                                   (CONS\r\n                                    :POINTS\r\n                                    (MAPCAR\r\n                                     (LAMBDA\r\n                                      (L)\r\n                                      (MAPCAR\r\n                                       #'ORG.MAPCAR.PARSE-NUMBER:PARSE-NUMBER\r\n                                       (SPLIT-SEQUENCE:SPLIT-SEQUENCE\r\n                                        #\\,\r\n                                        L)))\r\n                                     (CDR\r\n                                      (SPLIT-SEQUENCE:SPLIT-SEQUENCE\r\n                                       #\\Newline\r\n                                       (DRAKMA:HTTP-REQUEST\r\n                                        \"http://datasets.connectmv.com/file/gas-furnace.csv\")))))))))\r\n              :TIME-PRECISION\r\n              'S)\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\nT\r\n```\r\n===========================================================================\r\n\r\nLets try a group by query...\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(QUERY *INFLUXDB*\r\n       \"select max(inputgasrate/co2) from gasrateco2 group by time(160m);\")\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\n(((:NAME . \"gasrateco2\") (:COLUMNS \"time\" \"max\")\r\n  (:POINTS (1395196800 0.05624))))\r\n```\r\n===========================================================================\r\n\r\nNow for continous queries, generally these are used for precomputed rollups.\r\nLets list the current precomputed queries.\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(LIST-CONTINUOUS-QUERIES *INFLUXDB*)\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\n(((:ID . 1)\r\n  (:QUERY\r\n   . \"select mean(inputgasrate), mean(co2) from gasrateco2 group by time(1h) into gasrateco2.1h;\"))\r\n)\r\n```\r\n===========================================================================\r\n\r\nNow to create a continous query, \r\n\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(CREATE-CONTINUOUS-QUERIES\r\n  *INFLUXDB*\r\n  \"select mean(inputgasrate), mean(co2) from gasrateco2 group by time(1h) into gasrateco2.1h;\")\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\nT\r\n```\r\n===========================================================================\r\n\r\nLets clean up now.\r\n\r\nDeleting database user 'user'\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(DELETE-DATABASE-USER *INFLUXDB* *APP-USER*)\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\nT\r\n```\r\n===========================================================================\r\n\r\nDeleting series response_times\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(DELETE-SERIES *INFLUXDB* :RESPONSE_TIMES)\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\nT\r\n```\r\n===========================================================================\r\n\r\nDeleting series gasrateco2\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(DELETE-SERIES *INFLUXDB* :GASRATECO2)\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\nT\r\n```\r\n===========================================================================\r\n\r\nLets see what shards exist...\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(GET-SHARDS *INFLUXDB*)\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\n((:LONG-TERM)\r\n (:SHORT-TERM\r\n  ((:END-TIME . 1395273600) (:ID . 1) (:SERVER-IDS 1)\r\n   (:START-TIME . 1394668800))\r\n  ((:END-TIME . 1814400) (:ID . 2) (:SERVER-IDS 1)\r\n   (:START-TIME . 1209600))))\r\n```\r\n===========================================================================\r\n\r\nAsyncronous Usage\r\n=================\r\n\r\nRather that create an async query mechanism or write wrappers we will\r\njust just lparallel ought right. It is simpler and more elegant.\r\n\r\nFirst we just need to create a lparallel kernel which maintains a\r\nthread pool. The integer parameter to make-kernel specifies the number\r\nof CPU cores available to lparallel\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(WHEN (NOT LPARALLEL.KERNEL:*KERNEL*)\r\n  (SETF LPARALLEL.KERNEL:*KERNEL* (LPARALLEL.KERNEL:MAKE-KERNEL 2)))\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\nNIL\r\n```\r\n===========================================================================\r\n\r\nCreate a new database 'example-async unless it already exists\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(HANDLER-CASE (CREATE-DATABASE\r\n                CL-INFLUXDB.EXAMPLES-ASYNC::*INFLUXDB*\r\n                CL-INFLUXDB.EXAMPLES-ASYNC::*DB*)\r\n              (COMMAND-FAIL (CL-INFLUXDB.EXAMPLES-ASYNC::E)\r\n               (PRINT CL-INFLUXDB.EXAMPLES-ASYNC::E)))\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\nT\r\n```\r\n===========================================================================\r\n \r\nRepeating the bulk load from prefious examples, we use lparallel futures to preform the operation asynchronously.\r\n\r\nThe pattern is: \r\n* Make a promise\r\n* Make future form that fuflills promise\r\n* Wait and/or do something else \r\n* Check for the fulfillment to be complete or call force which blocks\r\n\r\nFor example something that waits 10 seconds for a future to complete then forces it.\r\n```\r\n  (let ((p (promise))) \r\n    (future (progn (sleep .3) (fulfill p 'done)))\r\n    (format t \"Wait for future to come\") \r\n    (loop for i from 1 to 10 \r\n      when (not (fulfilledp p)) do \r\n        (progn (print i) (sleep .1)))\r\n    (force p))\r\n```\r\nGet it? On to using this pattern with write-points\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(LET ((CL-INFLUXDB.EXAMPLES-ASYNC::P (LPARALLEL.PROMISE:PROMISE)))\r\n  (LPARALLEL.PROMISE:FUTURE (LET ((CL-INFLUXDB.EXAMPLES-ASYNC::RESULT\r\n                                   (WRITE-POINTS\r\n                                    CL-INFLUXDB.EXAMPLES-ASYNC::*INFLUXDB*\r\n                                    (LIST\r\n                                     (LIST*\r\n                                      '(:NAME\r\n                                        . CL-INFLUXDB.EXAMPLES-ASYNC::GASRATECO2)\r\n                                      (LIST*\r\n                                       '(:COLUMNS\r\n                                         CL-INFLUXDB.EXAMPLES-ASYNC::INPUTGASRATE\r\n                                         CL-INFLUXDB.EXAMPLES-ASYNC::CO2)\r\n                                       (LIST\r\n                                        (CONS\r\n                                         :POINTS\r\n                                         (DATA-TABLE:ROWS\r\n                                          (CL-CSV:GET-DATA-TABLE-FROM-CSV\r\n                                           (DRAKMA:HTTP-REQUEST\r\n                                            \"http://datasets.connectmv.com/file/gas-furnace.csv\"\r\n                                            :WANT-STREAM\r\n                                            T))))))))\r\n                                    :TIME-PRECISION\r\n                                    'CL-INFLUXDB.EXAMPLES-ASYNC::S)))\r\n                              (LPARALLEL.PROMISE:FULFILL\r\n                               CL-INFLUXDB.EXAMPLES-ASYNC::P\r\n                               CL-INFLUXDB.EXAMPLES-ASYNC::RESULT)))\r\n  (FORMAT T \"Right, lets sleep for a second...~%\")\r\n  (SLEEP 1)\r\n  (IF (LPARALLEL.PROMISE:FULFILLEDP CL-INFLUXDB.EXAMPLES-ASYNC::P)\r\n      (FORMAT T \"Looks like it's done~%\")\r\n      (FORMAT T\r\n              \"Looks like it's not done yet. Well we will force it, then~%\"))\r\n  (PRINT (LPARALLEL.PROMISE:FORCE CL-INFLUXDB.EXAMPLES-ASYNC::P)))\r\n;;-------------------------------------------------------------------------\r\nRight, lets sleep for a second...\r\nLooks like it's done\r\n\r\nT \r\nResults:\r\n\r\nT\r\n```\r\n===========================================================================\r\n\r\nLets try a group by query...asynchronously\r\nWe will request fulfillment wait up to 10 seconds and the get the results\r\n\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(LET ((CL-INFLUXDB.EXAMPLES-ASYNC::P (LPARALLEL.PROMISE:PROMISE)))\r\n  (LPARALLEL.PROMISE:FUTURE (LPARALLEL.PROMISE:FULFILL CL-INFLUXDB.EXAMPLES-ASYNC::P\r\n                                                       (QUERY\r\n                                                        CL-INFLUXDB.EXAMPLES-ASYNC::*INFLUXDB*\r\n                                                        \"select max(inputgasrate/co2) from gasrateco2 group by time(160m);\")))\r\n  (LOOP CL-INFLUXDB.EXAMPLES-ASYNC::FOR CL-INFLUXDB.EXAMPLES-ASYNC::I\r\n                                        CL-INFLUXDB.EXAMPLES-ASYNC::FROM\r\n                                        1\r\n                                        CL-INFLUXDB.EXAMPLES-ASYNC::TO\r\n                                        1000\r\n        WHEN (NOT (LPARALLEL.PROMISE:FULFILLEDP CL-INFLUXDB.EXAMPLES-ASYNC::P))\r\n          DO (PROGN (FORMAT T\r\n                            \"Wait ~fms~%\"\r\n                            (/ CL-INFLUXDB.EXAMPLES-ASYNC::I 100))\r\n                    (SLEEP 0.01)))\r\n          (LPARALLEL.PROMISE:FORCE CL-INFLUXDB.EXAMPLES-ASYNC::P))\r\n;;-------------------------------------------------------------------------\r\nWait 0.01ms\r\nWait 0.02ms\r\nWait 0.03ms\r\n\r\nResults:\r\n\r\n(((:NAME . \"gasrateco2\") (:COLUMNS \"time\" \"max\")\r\n  (:POINTS (1395196800 0.05624))))\r\n```\r\n===========================================================================\r\n\r\nRemove the new database 'example-async\r\n```\r\n;;-----------------------------------CODE----------------------------------\r\n(HANDLER-CASE (DELETE-DATABASE\r\n                CL-INFLUXDB.EXAMPLES-ASYNC::*INFLUXDB*\r\n                CL-INFLUXDB.EXAMPLES-ASYNC::*DB*)\r\n              (COMMAND-FAIL (CL-INFLUXDB.EXAMPLES-ASYNC::E)\r\n               (PRINT CL-INFLUXDB.EXAMPLES-ASYNC::E)))\r\n;;-------------------------------------------------------------------------\r\n\r\nResults:\r\n\r\nT\r\n```\r\nLICENSE\r\n=======\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2014 Michael Maul\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}